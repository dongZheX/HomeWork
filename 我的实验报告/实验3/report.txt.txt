单进程编程和多进程编程有多种区别。
1）执行方式：
单进程是一个进程按设计好的流程从上到下顺序执行，程序设计者需要在该进程内合理安排执行顺序；而多进程是多个进程同时执行的，是并行的（实际上是高速切换着运行这多个进程），程序设计者除了考虑每个进程内的执行顺序，还要合理安排每个进程的流程。

2）数据同步：
单进程的数据是同步的，在该进程中改变数据，影响是全局的。
而多进程中，子进程数据是父进程数据在内存另一位置的拷贝，是相互独立的，互不影响对父进程数据的操作不会影响子进程数据，子进程同样。

3）CPU利用率：
单进程在等待io时，cpu是空闲的；因此，CPU利用率低。
多进程在某一进程等待io时，通过各种复杂而灵活的调度算法，运行另一个进程，所以CPU利用率高。

4）单进程的用途较为单一，而多进程的用途广泛。


修改include/linux/sched.h/INIT_TASK中的priority就可以改变时间片大小。
变化不大的原因是，子进程连续占用cpu的时间要比时间片大很多。

仅针对样本程序建立的进程，在修改时间片前后，log文件的统计结果（不包括Graphic）都是什么样？结合你的修改分析一下为什么会这样变化，或者为什么没变化？

依次将时间偏设为1，5，10，15，20，25，50，100，150后，经统计分析log文件可以发现：
1）在一定的范围内，平均等待时间，平均完成时间的变化随着时间片的增大而减小。这是因为在时间片小的情况下，cpu将时间耗费在调度切换上，所以平均等待时间增加。
2）超过一定的范围之后，这些参数将不再有明显的变化，这是因为在这种情况下，RR轮转调度就变成了FCFS先来先服务了。随着时间片的修改，吞吐量始终没有明显的变化，这是因为在单位时间内，系统所能完成的进程数量是不会变的。